<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApiKeyShouldNotBeEmpty" xml:space="preserve">
    <value>ApiKey should not be empty</value>
  </data>
  <data name="ConfirmStageDrop" xml:space="preserve">
    <value>Stage '{0}' will be dropped. Do you want to continue?</value>
  </data>
  <data name="CreatedStageMessage" xml:space="preserve">
    <value>Created new stage.
Stage Id: {0}
Feed URI: {1}</value>
  </data>
  <data name="CreatingStageMessage" xml:space="preserve">
    <value>Creating stage with name {0}</value>
  </data>
  <data name="DisplayNameShouldNotBeEmpty" xml:space="preserve">
    <value>Display name should not be empty</value>
  </data>
  <data name="DropCommandWasCanceled" xml:space="preserve">
    <value>Drop was canceled</value>
  </data>
  <data name="DroppingStageMessage" xml:space="preserve">
    <value>Dropping stage with id '{0}'..</value>
  </data>
  <data name="DroppedStageMessage" xml:space="preserve">
    <value>Stage '{0}' was dropped.</value>
  </data>
  <data name="HeaderStageCreationDate" xml:space="preserve">
    <value>Creation date</value>
  </data>
  <data name="HeaderStageExpirationDate" xml:space="preserve">
    <value>Expiration date</value>
  </data>
  <data name="HeaderStageFeed" xml:space="preserve">
    <value>Feed</value>
  </data>
  <data name="HeaderStageMemberships" xml:space="preserve">
    <value>Memberships</value>
  </data>
  <data name="HeaderStageMemberType" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="HeaderStageMemberUserName" xml:space="preserve">
    <value>User name</value>
  </data>
  <data name="HeaderStageName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="HeaderStagePackages" xml:space="preserve">
    <value>Packages</value>
  </data>
  <data name="HeaderStageStatus" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="LiveFeed" xml:space="preserve">
    <value>the NuGet gallery</value>
  </data>
  <data name="NoApiKeyFound" xml:space="preserve">
    <value>No API Key was provided and no API Key could be found for {0}. To save an API Key for a source use the 'setApiKey' command.</value>
  </data>
  <data name="StageCommandApiKeyDescription" xml:space="preserve">
    <value>The API key for the server.</value>
  </data>
  <data name="StageCommandCreateDescription" xml:space="preserve">
    <value>Create a new stage</value>
  </data>
  <data name="StageCommandDescription" xml:space="preserve">
    <value>Manage Staging environments. A Stage allows you to test your packages before publishing to NuGet Gallery.</value>
  </data>
  <data name="StageCommandDropDescription" xml:space="preserve">
    <value>Drop a stage you own</value>
  </data>
  <data name="StageCommandListDescription" xml:space="preserve">
    <value>Get a list of the stages you own</value>
  </data>
  <data name="StageCommandSourceDescription" xml:space="preserve">
    <value>Specifies the server URL. If not specified, nuget.org is used unless DefaultPushSource config value is set in the NuGet config file. The specified server must support staging.</value>
  </data>
  <data name="StageCommandUsageExample" xml:space="preserve">
    <value>stage -create "my first stage" -source https://api.nuget.org/v3/index.json -apiKey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
stage -drop 4b139cb7-c4d4-4541-8c05-0f41ba5ab945 -source https://api.nuget.org/v3/index.json -apiKey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a</value>
  </data>
  <data name="StageCommandUsageSummary" xml:space="preserve">
    <value>(create &lt;display name&gt; | drop &lt;stage id&gt; | list | get &lt;stage id&gt;| commit &lt;stage id&gt; | progress &lt;stage id&gt;) [API Key] [Source] [Options]</value>
  </data>
  <data name="StageIdShouldNotBeEmpty" xml:space="preserve">
    <value>Stage id should not be empty</value>
  </data>
  <data name="StageListNoStagesFound" xml:space="preserve">
    <value>No stages were found.</value>
  </data>
  <data name="StagingNotSupported" xml:space="preserve">
    <value>The specified server does not support staging.</value>
  </data>
  <data name="StageCommandGetDescription" xml:space="preserve">
    <value>Get stage details</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="StageCommandCommitDescription" xml:space="preserve">
    <value>Commit staged packages to source feed, and remove stage</value>
  </data>
  <data name="StageCommandProgressDescription" xml:space="preserve">
    <value>Get status of commit progress</value>
  </data>
  <data name="CommitCommandWasCanceled" xml:space="preserve">
    <value>Commit was canceled</value>
  </data>
  <data name="ConfirmStageCommit" xml:space="preserve">
    <value>Stage '{0}' will be committed. Do you want to continue?</value>
  </data>
  <data name="CommittingStageMessage" xml:space="preserve">
    <value>Committing stage with id '{0}'</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>Completed</value>
  </data>
  <data name="Failed" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="InProgress" xml:space="preserve">
    <value>In progress</value>
  </data>
  <data name="Pending" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="RetryCommitMessage" xml:space="preserve">
    <value>Please retry commit or contact support in case of recurring failures</value>
  </data>
  <data name="StageCommitCompleted" xml:space="preserve">
    <value>Commit has completed</value>
  </data>
  <data name="StageCommitFailed" xml:space="preserve">
    <value>Commit failed</value>
  </data>
  <data name="StageCommitInProgress" xml:space="preserve">
    <value>Commit is in progress</value>
  </data>
  <data name="StageCommitPending" xml:space="preserve">
    <value>Commit is pending</value>
  </data>
  <data name="CanNotParseProgress" xml:space="preserve">
    <value>Can't parse commit progress. Please update to a newer version of NuGet client.</value>
  </data>
  <data name="StageCommandProgressTimeoutDescription" xml:space="preserve">
    <value>Specifies the timeout of monitoring commit progress in seconds. Defaults to 300 seconds (5 minutes).</value>
  </data>
  <data name="HttpError" xml:space="preserve">
    <value>Response status code does not indicate success</value>
  </data>
</root>